
\documentclass{article}

\usepackage{amsmath}
\usepackage{amscd}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}

\begin{document}
\SweaveOpts{concordance=TRUE}
%#\

\title{Regmex package example (Version 1.0)}
\author{Morten Muhlig Nielsen}
\maketitle

This is a demo for using the \verb@Regmex@ package in R.
\verb@Regmex@ is a package developed for analysing motifs in ranked lists of DNA or RNA sequences.
\verb@Regmex@ make use of regular expressions to define motifs and can be used to evaluate rank correlation of the motif in the sequences. 
Alternatively it can evaluate clustering of a motif anywhere in a list of sequences.

To load \verb@Regmex@:

<<two>>=
library("Regmex")
@
<<foo,echo=FALSE,results=hide>>=
options(width=70)
@


To get us started, we need first a list of sequences. 
These could be the result of a biological experiment, e.g. an expression study.
The package come with a simulated dataset \verb@seqlist@ which consists of a list of sequences in plain text format that we can imagine coming from an experimental setting.

<<two>>=
data(seqlist)
@

The sequences are ranked according to the experimental setting beforehand, but this could alternatively be done in R as well.
The data set consists of 1000 sequences of length 100 nucleotides\\

\noindent\verb@> seqlist[[1]]@
<<two,echo=FALSE>>=
#head(seqlist,3)
#strsplit(split = "G",seqlist[[1]][1])
cat('[1] \"',substr(seqlist[[1]][1],1,60),"\n     ",substr(seqlist[[1]][1],61,100),'\"',sep="")
#cat(substr(seqlist[[1]][1],71,100))
#writeLines(strwrap(capture.output(seqlist[[1]])))
#cat(paste(strwrap(seqlist[[1]][1], width = 70), collapse = "\\\\\n"), "\n")
@

We need to convert the sequence list into a format that Regmex handles. 
This format contains the sequences in a list with associated statistics needed for subsequent rank or clustering calculations.
We use the \verb@seq.list.con()@ command for this purpose:

<<two>>=
seqlist <- seq.list.con(seqlist)
names(seqlist[[1]])
# the di nucleotide frequency e.g.:
seqlist[[1]]$freq.di
@

The \verb@seq.list.con()@ function also has parallel functionality relevant for large sequences or long sequence lists, e.g.\\

\noindent\verb@> seqlist <- seq.list.con(seqlist, cores = 8)@\\

If we are interested in evaluation of rank correlation for a specific motif, we can use the \verb@motif.p()@ function to calculate a $p$-value for the rank correlation.
The two motifs ATGCT and GGCTT has been enriched among the first 100 sequences in \verb@seqlist@, and thus have low $p$-values:
<<two>>=
motif.p(seqlist, "ATGCT")
motif.p(seqlist, "GGCTT")
motif.p(seqlist, "GACTT") # not enriched
@

We can exploit the regular expression capability of \verb@Regmex@ and look for either of the two motifs at the same time:

<<two>>=
motif.p(seqlist, "(ATGCT)|(GGCTT)")
@

Here we see an increased significance relative to either motif alone, as expected. 

We can also use a regular expression to look for a composite motif consisting of the two motifs found together in the same sequence. 
This would look like:

<<two>>=
motif.p(seqlist, "(ATGCT)(A|C|G|T)*(GGCTT)") # ATGCT followed by GGCTT
motif.p(seqlist, "(GGCTT)(A|C|G|T)*(ATGCT)") # GGCTT followed by ATGCT
motif.p(seqlist, "((ATGCT)(A|C|G|T)*(GGCTT))|((GGCTT)(A|C|G|T)*(ATGCT))") 
# motifs together in both orientations.
@

Since we get a low significance, the motifs does not seem to be enriched as a composite motif, which is also not expected, since the two motifs were enriched independently in the sequences. 
We can create a new sequence list and enrich it with a composite motif like this:
<<two>>=
set.seed(1)
seqlist2 <- 
	lapply(1:1000,function(x)paste(sample(c("G","C","A","T"),
		replace = T,100),collapse=""))
for(s in sample(1:100,30)){
	pos <- sample(1:95,1)	
	substring(seqlist2[[s]],pos,pos+5) <- "ATGCT"
 pos <- sample(1:95,1)	
 substring(seqlist2[[s]],pos,pos+5) <- "GGCTT"
}
seqlist2 <- seq.list.con(seqlist2, cores = 8)
@

And now:
<<two>>=
motif.p(seqlist2, "(ATGCT)(A|C|G|T)*(GGCTT)") # ATGCT followed by GGCTT
motif.p(seqlist2, "(GGCTT)(A|C|G|T)*(ATGCT)") # GGCTT followed by ATGCT
motif.p(seqlist2, "((ATGCT)(A|C|G|T)*(GGCTT))|((GGCTT)(A|C|G|T)*(ATGCT))") 
# motifs together in both orientations.
@

Here we see an enrichment of the two motifs occurring together in both orientations, as expected by design.

\verb@Regmex@ can be used to exhaustively evaluate rank correlation for a long list of motifs. 
For this we use the \verb@motif.list.p()@ function. 
An example could be all 5-mers. For convenience, \verb@Regmex@ has a function to generate all k-mers, \verb@all.mers()@.

<<two>>=
all.mers(2)
@


\noindent\verb@> res5 <- motif.list.p(seqlist2, all.mers(5),cores=8)@\\
\noindent\verb@# total time (s):  185.632 (variable, depending on your system)@
<<two,echo=FALSE>>=
data(res5)
@
<<two>>=
head(res5[order(res5)])
@

<<label=fig1plot2,include=FALSE, echo=FALSE>>=
plot(1:1024,-log(res5,10),ylab="motif -log(p-value)",xlab="motif index")
idx <- -log(res5,10)>1
#names(res5)[idx]
text((1:1024)[idx],(-log(res5,10))[idx], names(res5)[idx],pos=4,cex=0.6)
@
\begin{figure}
\begin{center}
<<label=figopt,fig=TRUE,echo=FALSE>>=
<<fig1plot2>>
@
\end{center}
\caption{All 5-mer rank correlation $p$-values}
\label{fig:opt}
\end{figure}

We see in Figure 1 that the two most significantly correlated motifs are the ones that were added, and that some of the others overlap the ends of the added motifs, e.g. GCTTG and GTCAT. 

\verb@Regmex@ comes with three flavors of rank correlation evaluations. One is based on Brownian bridge theory, another is based on random walk theory and a third is based on a modified sum of rank test. 
The choice is given in the \verb@mode@ parameter as "bb", "rw" or "msr". Brownian bridge is the default mode.
<<two>>=
motif.p(seqlist2, "ATGCT", mode = "bb")
motif.p(seqlist2, "ATGCT", mode = "rw")
motif.p(seqlist2, "ATGCT", mode = "msr")
@

The three ways of evaluating rank correlation are different in how the null model is defined and in sensitivity in different sequence and motif scenarios. 
Most importantly, the random walk method is sensitive to clustering of motifs anywhere in the sequence list, and thus can be used to detect local runs of motifs anywhere in the list of sequences. \\

\verb@Regmex@ contains a number of additional function relevant for analyzing motifs. One of them is a function that returns the number of observed motifs along the sequence list:
<<two>>=
head(n.obs.mot("ATGCT", seqlist2),30)
tail(n.obs.mot("ATGCT", seqlist2),30)
@

Another useful function \verb@align.motif()@  extracts the motifs from the sequences whit optional flanking bases, which allows an alignment of the motifs, e.g.:

<<two>>=
cat(head(align.motif("AT(G|C)CT",seqlist2,lf = 2, rf = 4), 15),sep="\n")
@

Here a left flank of two nucleotides and right flank of four nucleotides was used with a regular expression motif capturing the enriched motif and a mismatch motif.
In this way it is possible to inspect the individual motif occurrences and perhaps infer additional relevant parts of a motif. 

\verb@Regmex@ includes a function \verb@seqs.motifs()@ which can be used to extract all k-mers from one or more sequences. 
This is relevant for evaluating rank correlation for the subset of k-mers defined by one or more sequences only. 
An example could be evaluationg correlations for all k-mers contained in an RNA molecule that is suspected to function through some RNA interference mechanism.

<<two>>=
motifs <- motifs.seqs(tail(seqlist2,1),7)
# all 7-mer motifs occurring in the first sequence from the end
@
This set of motif could be revers complimented with \verb@rev.motifs <- rev.comp(motifs)@ if needed, and a rank correlation evaluation would be done with:\\
\noindent\verb@> rnai.set <- motif.list.p(seqlist2, rev.motifs, cores=8)@\\

Finally, \verb@Regmex@ has a plot function to visualize a set of found motifs and find clusters within them. 
The function l.clust will cluster motifs based on their Levensthein distances, draw a cluster dendrogram (if plot=TRUE) and list the motifs and their cluster associations.

We here try to cluster observations of the two enriched motifs ATGCT and GGCTT flanked by two additional nucleotides at both ends. First we define the set of motifs using align.motif:

<<two>>=
motifs <- 
	c(align.motif(motif = "ATGCT",seqlist = seqlist2, lf = 2, rf = 2)[1:20], 
	align.motif(motif = "GGCTT",seqlist = seqlist2, lf = 2, rf = 2)[1:20])
@
We now have 20 of each motif occurrence, and we expect these to separate into two clusters defined by each motif.

\noindent\verb@> mot.clusters <- l.clust(set = motifs, k = 6, plot=TRUE)@
<<label=fig2plot2,include=FALSE, echo=FALSE>>=
mot.clusters <- l.clust(set = motifs, k = 6, plot=TRUE)
@
\begin{figure}
\begin{center}
<<label=figtpt,fig=TRUE,echo=FALSE>>=
<<fig2plot2>>
@
\end{center}
\caption{Cluster dendrogram of observed motifs}
\label{fig:tpt}
\end{figure}

<<two>>=
head(mot.clusters)
@

As expected the two enriched motifs define two distinct clusters. Six clusters were produces for illustration, the dendrogram clearly suggests two clusters. 



\end{document}
